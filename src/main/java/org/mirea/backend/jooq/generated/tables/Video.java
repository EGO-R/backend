/*
 * This file is generated by jOOQ.
 */
package org.mirea.backend.jooq.generated.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.mirea.backend.jooq.generated.Keys;
import org.mirea.backend.jooq.generated.Public;
import org.mirea.backend.jooq.generated.tables.Clients.ClientsPath;
import org.mirea.backend.jooq.generated.tables.records.VideoRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Video extends TableImpl<VideoRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.video</code>
     */
    public static final Video VIDEO = new Video();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VideoRecord> getRecordType() {
        return VideoRecord.class;
    }

    /**
     * The column <code>public.video.id</code>.
     */
    public final TableField<VideoRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.video.name</code>.
     */
    public final TableField<VideoRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(256).nullable(false), this, "");

    /**
     * The column <code>public.video.video_url</code>.
     */
    public final TableField<VideoRecord, String> VIDEO_URL = createField(DSL.name("video_url"), SQLDataType.VARCHAR(256).nullable(false), this, "");

    /**
     * The column <code>public.video.user_id</code>.
     */
    public final TableField<VideoRecord, Long> USER_ID = createField(DSL.name("user_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.video.preview</code>.
     */
    public final TableField<VideoRecord, String> PREVIEW = createField(DSL.name("preview"), SQLDataType.VARCHAR(256).nullable(false).defaultValue(DSL.field(DSL.raw("''::character varying"), SQLDataType.VARCHAR)), this, "");

    private Video(Name alias, Table<VideoRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Video(Name alias, Table<VideoRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.video</code> table reference
     */
    public Video(String alias) {
        this(DSL.name(alias), VIDEO);
    }

    /**
     * Create an aliased <code>public.video</code> table reference
     */
    public Video(Name alias) {
        this(alias, VIDEO);
    }

    /**
     * Create a <code>public.video</code> table reference
     */
    public Video() {
        this(DSL.name("video"), null);
    }

    public <O extends Record> Video(Table<O> path, ForeignKey<O, VideoRecord> childPath, InverseForeignKey<O, VideoRecord> parentPath) {
        super(path, childPath, parentPath, VIDEO);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class VideoPath extends Video implements Path<VideoRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> VideoPath(Table<O> path, ForeignKey<O, VideoRecord> childPath, InverseForeignKey<O, VideoRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private VideoPath(Name alias, Table<VideoRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public VideoPath as(String alias) {
            return new VideoPath(DSL.name(alias), this);
        }

        @Override
        public VideoPath as(Name alias) {
            return new VideoPath(alias, this);
        }

        @Override
        public VideoPath as(Table<?> alias) {
            return new VideoPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<VideoRecord, Long> getIdentity() {
        return (Identity<VideoRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<VideoRecord> getPrimaryKey() {
        return Keys.VIDEO_PKEY;
    }

    @Override
    public List<ForeignKey<VideoRecord, ?>> getReferences() {
        return Arrays.asList(Keys.VIDEO__VIDEO_USER_ID_FKEY);
    }

    private transient ClientsPath _clients;

    /**
     * Get the implicit join path to the <code>public.clients</code> table.
     */
    public ClientsPath clients() {
        if (_clients == null)
            _clients = new ClientsPath(this, Keys.VIDEO__VIDEO_USER_ID_FKEY, null);

        return _clients;
    }

    @Override
    public Video as(String alias) {
        return new Video(DSL.name(alias), this);
    }

    @Override
    public Video as(Name alias) {
        return new Video(alias, this);
    }

    @Override
    public Video as(Table<?> alias) {
        return new Video(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Video rename(String name) {
        return new Video(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Video rename(Name name) {
        return new Video(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Video rename(Table<?> name) {
        return new Video(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Video where(Condition condition) {
        return new Video(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Video where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Video where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Video where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Video where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Video where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Video where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Video where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Video whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Video whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
