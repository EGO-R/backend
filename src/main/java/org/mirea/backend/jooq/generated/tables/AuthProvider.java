/*
 * This file is generated by jOOQ.
 */
package org.mirea.backend.jooq.generated.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.mirea.backend.jooq.generated.Keys;
import org.mirea.backend.jooq.generated.Public;
import org.mirea.backend.jooq.generated.tables.Clients.ClientsPath;
import org.mirea.backend.jooq.generated.tables.records.AuthProviderRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class AuthProvider extends TableImpl<AuthProviderRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.auth_provider</code>
     */
    public static final AuthProvider AUTH_PROVIDER = new AuthProvider();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AuthProviderRecord> getRecordType() {
        return AuthProviderRecord.class;
    }

    /**
     * The column <code>public.auth_provider.id</code>.
     */
    public final TableField<AuthProviderRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.auth_provider.user_id</code>.
     */
    public final TableField<AuthProviderRecord, Long> USER_ID = createField(DSL.name("user_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.auth_provider.provider_type</code>.
     */
    public final TableField<AuthProviderRecord, Integer> PROVIDER_TYPE = createField(DSL.name("provider_type"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.auth_provider.provider_user_id</code>.
     */
    public final TableField<AuthProviderRecord, Long> PROVIDER_USER_ID = createField(DSL.name("provider_user_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.auth_provider.credentials</code>.
     */
    public final TableField<AuthProviderRecord, String> CREDENTIALS = createField(DSL.name("credentials"), SQLDataType.VARCHAR(256).nullable(false), this, "");

    private AuthProvider(Name alias, Table<AuthProviderRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private AuthProvider(Name alias, Table<AuthProviderRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.auth_provider</code> table reference
     */
    public AuthProvider(String alias) {
        this(DSL.name(alias), AUTH_PROVIDER);
    }

    /**
     * Create an aliased <code>public.auth_provider</code> table reference
     */
    public AuthProvider(Name alias) {
        this(alias, AUTH_PROVIDER);
    }

    /**
     * Create a <code>public.auth_provider</code> table reference
     */
    public AuthProvider() {
        this(DSL.name("auth_provider"), null);
    }

    public <O extends Record> AuthProvider(Table<O> path, ForeignKey<O, AuthProviderRecord> childPath, InverseForeignKey<O, AuthProviderRecord> parentPath) {
        super(path, childPath, parentPath, AUTH_PROVIDER);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class AuthProviderPath extends AuthProvider implements Path<AuthProviderRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> AuthProviderPath(Table<O> path, ForeignKey<O, AuthProviderRecord> childPath, InverseForeignKey<O, AuthProviderRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private AuthProviderPath(Name alias, Table<AuthProviderRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public AuthProviderPath as(String alias) {
            return new AuthProviderPath(DSL.name(alias), this);
        }

        @Override
        public AuthProviderPath as(Name alias) {
            return new AuthProviderPath(alias, this);
        }

        @Override
        public AuthProviderPath as(Table<?> alias) {
            return new AuthProviderPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<AuthProviderRecord, Long> getIdentity() {
        return (Identity<AuthProviderRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<AuthProviderRecord> getPrimaryKey() {
        return Keys.AUTH_PROVIDER_PKEY;
    }

    @Override
    public List<ForeignKey<AuthProviderRecord, ?>> getReferences() {
        return Arrays.asList(Keys.AUTH_PROVIDER__AUTH_PROVIDER_USER_ID_FKEY);
    }

    private transient ClientsPath _clients;

    /**
     * Get the implicit join path to the <code>public.clients</code> table.
     */
    public ClientsPath clients() {
        if (_clients == null)
            _clients = new ClientsPath(this, Keys.AUTH_PROVIDER__AUTH_PROVIDER_USER_ID_FKEY, null);

        return _clients;
    }

    @Override
    public AuthProvider as(String alias) {
        return new AuthProvider(DSL.name(alias), this);
    }

    @Override
    public AuthProvider as(Name alias) {
        return new AuthProvider(alias, this);
    }

    @Override
    public AuthProvider as(Table<?> alias) {
        return new AuthProvider(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public AuthProvider rename(String name) {
        return new AuthProvider(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AuthProvider rename(Name name) {
        return new AuthProvider(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public AuthProvider rename(Table<?> name) {
        return new AuthProvider(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AuthProvider where(Condition condition) {
        return new AuthProvider(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AuthProvider where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AuthProvider where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AuthProvider where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public AuthProvider where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public AuthProvider where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public AuthProvider where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public AuthProvider where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AuthProvider whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AuthProvider whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
