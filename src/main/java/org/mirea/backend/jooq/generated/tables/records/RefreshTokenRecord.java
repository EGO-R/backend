/*
 * This file is generated by jOOQ.
 */
package org.mirea.backend.jooq.generated.tables.records;


import java.time.LocalDateTime;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;
import org.mirea.backend.jooq.generated.tables.RefreshToken;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class RefreshTokenRecord extends UpdatableRecordImpl<RefreshTokenRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.refresh_token.user_id</code>.
     */
    public void setUserId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.refresh_token.user_id</code>.
     */
    public Long getUserId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.refresh_token.token_hash</code>.
     */
    public void setTokenHash(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.refresh_token.token_hash</code>.
     */
    public String getTokenHash() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.refresh_token.expires_at</code>.
     */
    public void setExpiresAt(LocalDateTime value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.refresh_token.expires_at</code>.
     */
    public LocalDateTime getExpiresAt() {
        return (LocalDateTime) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached RefreshTokenRecord
     */
    public RefreshTokenRecord() {
        super(RefreshToken.REFRESH_TOKEN);
    }

    /**
     * Create a detached, initialised RefreshTokenRecord
     */
    public RefreshTokenRecord(Long userId, String tokenHash, LocalDateTime expiresAt) {
        super(RefreshToken.REFRESH_TOKEN);

        setUserId(userId);
        setTokenHash(tokenHash);
        setExpiresAt(expiresAt);
        resetChangedOnNotNull();
    }
}
