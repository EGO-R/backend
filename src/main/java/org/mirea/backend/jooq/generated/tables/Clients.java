/*
 * This file is generated by jOOQ.
 */
package org.mirea.backend.jooq.generated.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.mirea.backend.jooq.generated.Keys;
import org.mirea.backend.jooq.generated.Public;
import org.mirea.backend.jooq.generated.tables.AuthProvider.AuthProviderPath;
import org.mirea.backend.jooq.generated.tables.Video.VideoPath;
import org.mirea.backend.jooq.generated.tables.records.ClientsRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Clients extends TableImpl<ClientsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.clients</code>
     */
    public static final Clients CLIENTS = new Clients();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ClientsRecord> getRecordType() {
        return ClientsRecord.class;
    }

    /**
     * The column <code>public.clients.id</code>.
     */
    public final TableField<ClientsRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.clients.email</code>.
     */
    public final TableField<ClientsRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.VARCHAR(65).nullable(false), this, "");

    /**
     * The column <code>public.clients.name</code>.
     */
    public final TableField<ClientsRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(65).nullable(false), this, "");

    /**
     * The column <code>public.clients.role</code>.
     */
    public final TableField<ClientsRecord, Short> ROLE = createField(DSL.name("role"), SQLDataType.SMALLINT.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.SMALLINT)), this, "");

    private Clients(Name alias, Table<ClientsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Clients(Name alias, Table<ClientsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.clients</code> table reference
     */
    public Clients(String alias) {
        this(DSL.name(alias), CLIENTS);
    }

    /**
     * Create an aliased <code>public.clients</code> table reference
     */
    public Clients(Name alias) {
        this(alias, CLIENTS);
    }

    /**
     * Create a <code>public.clients</code> table reference
     */
    public Clients() {
        this(DSL.name("clients"), null);
    }

    public <O extends Record> Clients(Table<O> path, ForeignKey<O, ClientsRecord> childPath, InverseForeignKey<O, ClientsRecord> parentPath) {
        super(path, childPath, parentPath, CLIENTS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ClientsPath extends Clients implements Path<ClientsRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> ClientsPath(Table<O> path, ForeignKey<O, ClientsRecord> childPath, InverseForeignKey<O, ClientsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ClientsPath(Name alias, Table<ClientsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ClientsPath as(String alias) {
            return new ClientsPath(DSL.name(alias), this);
        }

        @Override
        public ClientsPath as(Name alias) {
            return new ClientsPath(alias, this);
        }

        @Override
        public ClientsPath as(Table<?> alias) {
            return new ClientsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<ClientsRecord, Long> getIdentity() {
        return (Identity<ClientsRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ClientsRecord> getPrimaryKey() {
        return Keys.CLIENTS_PKEY;
    }

    @Override
    public List<UniqueKey<ClientsRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.CLIENTS_EMAIL_KEY);
    }

    private transient AuthProviderPath _authProvider;

    /**
     * Get the implicit to-many join path to the
     * <code>public.auth_provider</code> table
     */
    public AuthProviderPath authProvider() {
        if (_authProvider == null)
            _authProvider = new AuthProviderPath(this, null, Keys.AUTH_PROVIDER__AUTH_PROVIDER_USER_ID_FKEY.getInverseKey());

        return _authProvider;
    }

    private transient VideoPath _video;

    /**
     * Get the implicit to-many join path to the <code>public.video</code> table
     */
    public VideoPath video() {
        if (_video == null)
            _video = new VideoPath(this, null, Keys.VIDEO__VIDEO_USER_ID_FKEY.getInverseKey());

        return _video;
    }

    @Override
    public Clients as(String alias) {
        return new Clients(DSL.name(alias), this);
    }

    @Override
    public Clients as(Name alias) {
        return new Clients(alias, this);
    }

    @Override
    public Clients as(Table<?> alias) {
        return new Clients(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Clients rename(String name) {
        return new Clients(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Clients rename(Name name) {
        return new Clients(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Clients rename(Table<?> name) {
        return new Clients(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Clients where(Condition condition) {
        return new Clients(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Clients where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Clients where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Clients where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Clients where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Clients where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Clients where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Clients where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Clients whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Clients whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
