/*
 * This file is generated by jOOQ.
 */
package org.mirea.backend.jooq.generated;


import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.mirea.backend.jooq.generated.tables.Clients;
import org.mirea.backend.jooq.generated.tables.Databasechangeloglock;
import org.mirea.backend.jooq.generated.tables.Video;
import org.mirea.backend.jooq.generated.tables.records.ClientsRecord;
import org.mirea.backend.jooq.generated.tables.records.DatabasechangeloglockRecord;
import org.mirea.backend.jooq.generated.tables.records.VideoRecord;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * public.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<ClientsRecord> CLIENTS_EMAIL_KEY = Internal.createUniqueKey(Clients.CLIENTS, DSL.name("clients_email_key"), new TableField[] { Clients.CLIENTS.EMAIL }, true);
    public static final UniqueKey<ClientsRecord> CLIENTS_PKEY = Internal.createUniqueKey(Clients.CLIENTS, DSL.name("clients_pkey"), new TableField[] { Clients.CLIENTS.ID }, true);
    public static final UniqueKey<DatabasechangeloglockRecord> DATABASECHANGELOGLOCK_PKEY = Internal.createUniqueKey(Databasechangeloglock.DATABASECHANGELOGLOCK, DSL.name("databasechangeloglock_pkey"), new TableField[] { Databasechangeloglock.DATABASECHANGELOGLOCK.ID }, true);
    public static final UniqueKey<VideoRecord> VIDEO_PKEY = Internal.createUniqueKey(Video.VIDEO, DSL.name("video_pkey"), new TableField[] { Video.VIDEO.ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<VideoRecord, ClientsRecord> VIDEO__VIDEO_USER_ID_FKEY = Internal.createForeignKey(Video.VIDEO, DSL.name("video_user_id_fkey"), new TableField[] { Video.VIDEO.USER_ID }, Keys.CLIENTS_PKEY, new TableField[] { Clients.CLIENTS.ID }, true);
}
