plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.9.25'
    id 'org.jetbrains.kotlin.plugin.spring' version '1.9.25'
    id 'org.springframework.boot' version '3.4.3'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'nu.studer.jooq' version '9.0'
}

group = 'org.mirea'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // db
//    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-jooq'
    runtimeOnly 'org.postgresql:postgresql:42.7.4'
    jooqGenerator 'org.postgresql:postgresql:42.7.4'
    jooqGenerator "org.jooq:jooq:${jooq_version}"
    jooqGenerator "org.jooq:jooq-meta:${jooq_version}"
    jooqGenerator "org.jooq:jooq-codegen:${jooq_version}"
    implementation 'org.liquibase:liquibase-core'

    // security
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation("org.springframework.boot:spring-boot-starter-oauth2-resource-server")
    implementation("org.springframework.boot:spring-boot-starter-oauth2-client")
    implementation("com.nimbusds:nimbus-jose-jwt")
    implementation "io.jsonwebtoken:jjwt-api:${jsonwebtoken_version}"
    runtimeOnly "io.jsonwebtoken:jjwt-impl:${jsonwebtoken_version}"
    runtimeOnly "io.jsonwebtoken:jjwt-jackson:${jsonwebtoken_version}"

    // s3
    implementation "software.amazon.awssdk:aws-sdk-java:${awssdk_version}"
    implementation "software.amazon.awssdk:apache-client:${awssdk_version}"

    // web
//    implementation("org.springdoc:springdoc-openapi-starter-webmvc-ui:2.7.0")
//    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-reactor'

    // kotlin
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-reactor'

    // tests
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.jetbrains.kotlin:kotlin-test-junit5'
//    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testImplementation 'org.testcontainers:postgresql'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:testcontainers'
    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
}

tasks.withType(JavaCompile).configureEach {
    options.fork = true
    options.forkOptions.jvmArgs += ['-Xmx2048m']
}

kotlin {
    compilerOptions {
        freeCompilerArgs.addAll '-Xjsr305=strict'
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

jooq {
    version = "${jooq_version}"
    configurations {
        main {
            generateSchemaSourceOnCompilation = false
            generationTool {
                logging = org.jooq.meta.jaxb.Logging.INFO
                jdbc {
                    driver = "${jooq_generator_driver}"
                    url = "${jooq_generator_url}"
                    user = "${jooq_generator_user}"
                    password = "${jooq_generator_password}"
                }
                generator {
                    name = 'org.jooq.codegen.JavaGenerator'
                    database {
                        name = 'org.jooq.meta.postgres.PostgresDatabase'
                        inputSchema = 'public'
                        includes = '.*'
                        excludes = ''
                    }
                    generate {
                        pojos = false
                        daos = false
                        springAnnotations = true
                    }
                    target {
                        packageName = 'org.mirea.backend.jooq.generated'
                        directory = 'src/main/java'
                    }
                }
            }
        }
    }
}
